// Generated by CoffeeScript 1.10.0
(function() {
  var IMAGE_HEIGHT, IMAGE_WIDTH, WORLD_HEIGHT, WORLD_WIDTH, complex2hsv, fun, hsv2rgb;

  IMAGE_WIDTH = 800;

  IMAGE_HEIGHT = 800;

  WORLD_WIDTH = 2;

  WORLD_HEIGHT = 2;

  fun = function(z) {
    var a, b, c;
    a = z.pow(2).sub(1);
    b = z.sub({
      re: 2,
      im: 1
    }).pow(2);
    c = z.pow(2).add({
      re: 2,
      im: 2
    });
    return a.mul(b).div(c);
  };

  complex2hsv = function(z) {
    var a, k, m, rangee, ranges, sat, val;
    a = z.arg();
    while (a < 0) {
      a += 2 * Math.PI;
    }
    a /= 2 * Math.PI;
    m = z.abs();
    ranges = 0;
    rangee = 1;
    while (m > rangee) {
      ranges = rangee;
      rangee *= Math.E;
    }
    k = (m - ranges) / (rangee - ranges);
    sat = k < 0.5 ? k * 2 : 1 - (k - 0.5) * 2;
    sat = 1 - Math.pow(1 - sat, 3);
    sat = 0.5 + sat * 0.6;
    val = k < 0.5 ? k * 2 : 1 - (k - 0.5) * 2;
    val = 1 - val;
    val = 1 - Math.pow(1 - val, 3);
    val - 0.6 + val * 0.4;
    return [a, sat, val];
  };

  hsv2rgb = function(hsv) {
    var b, f, g, h, i, p, q, r, s, t, v;
    h = hsv[0];
    s = hsv[1];
    v = hsv[2];
    r = void 0;
    g = void 0;
    b = void 0;
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - (f * s));
    t = v * (1 - ((1 - f) * s));
    switch (i % 6) {
      case 0:
        r = v;
        g = t;
        b = p;
        break;
      case 1:
        r = q;
        g = v;
        b = p;
        break;
      case 2:
        r = p;
        g = v;
        b = t;
        break;
      case 3:
        r = p;
        g = q;
        b = v;
        break;
      case 4:
        r = t;
        g = p;
        b = v;
        break;
      case 5:
        r = v;
        g = p;
        b = q;
    }
    return [parseInt(r * 255), parseInt(g * 255), parseInt(b * 255)];
  };

  window.onload = function() {
    var c, ctx, data, f, idx, im, imageData, j, l, re, ref, ref1, rgb, x, y, z;
    c = document.getElementById('myCanvas');
    ctx = c.getContext('2d');
    imageData = ctx.createImageData(IMAGE_WIDTH, IMAGE_HEIGHT);
    data = imageData.data;
    for (y = j = 0, ref = IMAGE_HEIGHT; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
      im = WORLD_HEIGHT - (y * 2 * WORLD_HEIGHT / IMAGE_HEIGHT);
      for (x = l = 0, ref1 = IMAGE_WIDTH; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
        re = (x * 2 * WORLD_WIDTH / IMAGE_WIDTH) - WORLD_WIDTH;
        z = new Complex({
          re: re,
          im: im
        });
        f = fun(z);
        rgb = hsv2rgb(complex2hsv(f));
        idx = (IMAGE_WIDTH * y + x) * 4;
        data[idx] = rgb[0];
        data[idx + 1] = rgb[1];
        data[idx + 2] = rgb[2];
        data[idx + 3] = 255;
      }
    }
    return ctx.putImageData(imageData, 0, 0);
  };

}).call(this);
